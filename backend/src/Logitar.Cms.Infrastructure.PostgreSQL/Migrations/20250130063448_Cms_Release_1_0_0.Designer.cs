// <auto-generated />
using Logitar.Cms.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Logitar.Cms.Infrastructure.PostgreSQL.Migrations
{
    [DbContext(typeof(CmsContext))]
    [Migration("20250130063448_Cms_Release_1_0_0")]
    partial class Cms_Release_1_0_0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.ContentEntity", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContentId"));

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("ContentId");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("Version");

                    b.ToTable("Contents", "Cms");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.ContentLocaleEntity", b =>
                {
                    b.Property<int>("ContentLocaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContentLocaleId"));

                    b.Property<int>("ContentId")
                        .HasColumnType("integer");

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FieldValues")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("PublishedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("PublishedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("PublishedRevision")
                        .HasColumnType("bigint");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ContentLocaleId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DisplayName");

                    b.HasIndex("IsPublished");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PublishedBy");

                    b.HasIndex("PublishedOn");

                    b.HasIndex("PublishedRevision");

                    b.HasIndex("Revision");

                    b.HasIndex("UniqueName");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("ContentId", "LanguageId")
                        .IsUnique();

                    b.HasIndex("ContentTypeId", "LanguageId", "UniqueNameNormalized")
                        .IsUnique();

                    b.ToTable("ContentLocales", "Cms");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.ContentTypeEntity", b =>
                {
                    b.Property<int>("ContentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContentTypeId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("FieldCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsInvariant")
                        .HasColumnType("boolean");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("ContentTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DisplayName");

                    b.HasIndex("FieldCount");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IsInvariant");

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("UniqueName");

                    b.HasIndex("UniqueNameNormalized")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("Version");

                    b.ToTable("ContentTypes", "Cms");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.FieldDefinitionEntity", b =>
                {
                    b.Property<int>("FieldDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FieldDefinitionId"));

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsIndexed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInvariant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("FieldDefinitionId");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("ContentTypeId", "Id")
                        .IsUnique();

                    b.HasIndex("ContentTypeId", "Order")
                        .IsUnique();

                    b.HasIndex("ContentTypeId", "UniqueNameNormalized")
                        .IsUnique();

                    b.ToTable("FieldDefinitions", "Cms");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.FieldIndexEntity", b =>
                {
                    b.Property<int>("FieldIndexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FieldIndexId"));

                    b.Property<bool?>("Boolean")
                        .HasColumnType("boolean");

                    b.Property<int>("ContentId")
                        .HasColumnType("integer");

                    b.Property<int>("ContentLocaleId")
                        .HasColumnType("integer");

                    b.Property<string>("ContentLocaleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ContentTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ContentTypeUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FieldDefinitionId")
                        .HasColumnType("integer");

                    b.Property<string>("FieldDefinitionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("FieldDefinitionUid")
                        .HasColumnType("uuid");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("FieldTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("FieldTypeUid")
                        .HasColumnType("uuid");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<bool>("LanguageIsDefault")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LanguageUid")
                        .HasColumnType("uuid");

                    b.Property<double?>("Number")
                        .HasColumnType("double precision");

                    b.Property<string>("RelatedContent")
                        .HasColumnType("text");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint");

                    b.Property<string>("RichText")
                        .HasColumnType("text");

                    b.Property<string>("Select")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("String")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.HasKey("FieldIndexId");

                    b.HasIndex("Boolean");

                    b.HasIndex("ContentId");

                    b.HasIndex("ContentLocaleId");

                    b.HasIndex("ContentLocaleName");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("ContentTypeName");

                    b.HasIndex("ContentTypeUid");

                    b.HasIndex("ContentUid");

                    b.HasIndex("DateTime");

                    b.HasIndex("FieldDefinitionId");

                    b.HasIndex("FieldDefinitionName");

                    b.HasIndex("FieldDefinitionUid");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("FieldTypeName");

                    b.HasIndex("FieldTypeUid");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageIsDefault");

                    b.HasIndex("LanguageUid");

                    b.HasIndex("Number");

                    b.HasIndex("Revision");

                    b.HasIndex("Status");

                    b.HasIndex("String");

                    b.HasIndex("ContentLocaleId", "FieldDefinitionId", "Status")
                        .IsUnique();

                    b.ToTable("FieldIndex", "Cms");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.FieldTypeEntity", b =>
                {
                    b.Property<int>("FieldTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FieldTypeId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Settings")
                        .HasColumnType("text");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("FieldTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DataType");

                    b.HasIndex("DisplayName");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("UniqueName");

                    b.HasIndex("UniqueNameNormalized")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("Version");

                    b.ToTable("FieldTypes", "Cms");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.LanguageEntity", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("CodeNormalized")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<int>("LCID")
                        .HasColumnType("integer");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("LanguageId");

                    b.HasIndex("Code");

                    b.HasIndex("CodeNormalized")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DisplayName");

                    b.HasIndex("EnglishName");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IsDefault");

                    b.HasIndex("LCID");

                    b.HasIndex("NativeName");

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("Version");

                    b.ToTable("Languages", "Cms");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.PublishedContentEntity", b =>
                {
                    b.Property<int>("ContentLocaleId")
                        .HasColumnType("integer");

                    b.Property<int>("ContentId")
                        .HasColumnType("integer");

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ContentTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ContentTypeUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FieldValues")
                        .HasColumnType("text");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<bool>("LanguageIsDefault")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LanguageUid")
                        .HasColumnType("uuid");

                    b.Property<string>("PublishedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ContentLocaleId");

                    b.HasIndex("ContentId");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("ContentTypeName");

                    b.HasIndex("ContentTypeUid");

                    b.HasIndex("ContentUid");

                    b.HasIndex("DisplayName");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageIsDefault");

                    b.HasIndex("LanguageUid");

                    b.HasIndex("PublishedBy");

                    b.HasIndex("PublishedOn");

                    b.HasIndex("Revision");

                    b.HasIndex("UniqueName");

                    b.HasIndex("UniqueNameNormalized");

                    b.ToTable("PublishedContents", "Cms");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.UniqueIndexEntity", b =>
                {
                    b.Property<int>("UniqueIndexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqueIndexId"));

                    b.Property<int>("ContentId")
                        .HasColumnType("integer");

                    b.Property<int>("ContentLocaleId")
                        .HasColumnType("integer");

                    b.Property<string>("ContentLocaleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ContentTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ContentTypeUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentUid")
                        .HasColumnType("uuid");

                    b.Property<int>("FieldDefinitionId")
                        .HasColumnType("integer");

                    b.Property<string>("FieldDefinitionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("FieldDefinitionUid")
                        .HasColumnType("uuid");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("FieldTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("FieldTypeUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(278)
                        .HasColumnType("character varying(278)");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<bool>("LanguageIsDefault")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LanguageUid")
                        .HasColumnType("uuid");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ValueNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("UniqueIndexId");

                    b.HasIndex("ContentId");

                    b.HasIndex("ContentLocaleId");

                    b.HasIndex("ContentLocaleName");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("ContentTypeName");

                    b.HasIndex("ContentTypeUid");

                    b.HasIndex("ContentUid");

                    b.HasIndex("FieldDefinitionId");

                    b.HasIndex("FieldDefinitionName");

                    b.HasIndex("FieldDefinitionUid");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("FieldTypeName");

                    b.HasIndex("FieldTypeUid");

                    b.HasIndex("Key");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageIsDefault");

                    b.HasIndex("LanguageUid");

                    b.HasIndex("Revision");

                    b.HasIndex("Status");

                    b.HasIndex("Value");

                    b.HasIndex("ValueNormalized");

                    b.HasIndex("FieldDefinitionId", "LanguageId", "Status", "ValueNormalized")
                        .IsUnique();

                    b.ToTable("UniqueIndex", "Cms");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.ContentEntity", b =>
                {
                    b.HasOne("Logitar.Cms.Infrastructure.Entities.ContentTypeEntity", "ContentType")
                        .WithMany("Contents")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContentType");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.ContentLocaleEntity", b =>
                {
                    b.HasOne("Logitar.Cms.Infrastructure.Entities.ContentEntity", "Content")
                        .WithMany("Locales")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logitar.Cms.Infrastructure.Entities.ContentTypeEntity", "ContentType")
                        .WithMany("ContentLocales")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logitar.Cms.Infrastructure.Entities.LanguageEntity", "Language")
                        .WithMany("ContentLocales")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Content");

                    b.Navigation("ContentType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.FieldDefinitionEntity", b =>
                {
                    b.HasOne("Logitar.Cms.Infrastructure.Entities.ContentTypeEntity", "ContentType")
                        .WithMany("Fields")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logitar.Cms.Infrastructure.Entities.FieldTypeEntity", "FieldType")
                        .WithMany("FieldDefinitions")
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContentType");

                    b.Navigation("FieldType");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.FieldIndexEntity", b =>
                {
                    b.HasOne("Logitar.Cms.Infrastructure.Entities.ContentEntity", "Content")
                        .WithMany("FieldIndex")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Logitar.Cms.Infrastructure.Entities.ContentLocaleEntity", "ContentLocale")
                        .WithMany("FieldIndex")
                        .HasForeignKey("ContentLocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logitar.Cms.Infrastructure.Entities.ContentTypeEntity", "ContentType")
                        .WithMany("FieldIndex")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logitar.Cms.Infrastructure.Entities.FieldDefinitionEntity", "FieldDefinition")
                        .WithMany("FieldIndex")
                        .HasForeignKey("FieldDefinitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Logitar.Cms.Infrastructure.Entities.FieldTypeEntity", "FieldType")
                        .WithMany("FieldIndex")
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logitar.Cms.Infrastructure.Entities.LanguageEntity", "Language")
                        .WithMany("FieldIndex")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Content");

                    b.Navigation("ContentLocale");

                    b.Navigation("ContentType");

                    b.Navigation("FieldDefinition");

                    b.Navigation("FieldType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.PublishedContentEntity", b =>
                {
                    b.HasOne("Logitar.Cms.Infrastructure.Entities.ContentEntity", "Content")
                        .WithMany("PublishedContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logitar.Cms.Infrastructure.Entities.ContentLocaleEntity", "ContentLocale")
                        .WithOne("PublishedContent")
                        .HasForeignKey("Logitar.Cms.Infrastructure.Entities.PublishedContentEntity", "ContentLocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logitar.Cms.Infrastructure.Entities.ContentTypeEntity", "ContentType")
                        .WithMany("PublishedContents")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logitar.Cms.Infrastructure.Entities.LanguageEntity", "Language")
                        .WithMany("PublishedContents")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Content");

                    b.Navigation("ContentLocale");

                    b.Navigation("ContentType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.UniqueIndexEntity", b =>
                {
                    b.HasOne("Logitar.Cms.Infrastructure.Entities.ContentEntity", "Content")
                        .WithMany("UniqueIndex")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Logitar.Cms.Infrastructure.Entities.ContentLocaleEntity", "ContentLocale")
                        .WithMany("UniqueIndex")
                        .HasForeignKey("ContentLocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logitar.Cms.Infrastructure.Entities.ContentTypeEntity", "ContentType")
                        .WithMany("UniqueIndex")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logitar.Cms.Infrastructure.Entities.FieldDefinitionEntity", "FieldDefinition")
                        .WithMany("UniqueIndex")
                        .HasForeignKey("FieldDefinitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Logitar.Cms.Infrastructure.Entities.FieldTypeEntity", "FieldType")
                        .WithMany("UniqueIndex")
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logitar.Cms.Infrastructure.Entities.LanguageEntity", "Language")
                        .WithMany("UniqueIndex")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Content");

                    b.Navigation("ContentLocale");

                    b.Navigation("ContentType");

                    b.Navigation("FieldDefinition");

                    b.Navigation("FieldType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.ContentEntity", b =>
                {
                    b.Navigation("FieldIndex");

                    b.Navigation("Locales");

                    b.Navigation("PublishedContents");

                    b.Navigation("UniqueIndex");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.ContentLocaleEntity", b =>
                {
                    b.Navigation("FieldIndex");

                    b.Navigation("PublishedContent");

                    b.Navigation("UniqueIndex");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.ContentTypeEntity", b =>
                {
                    b.Navigation("ContentLocales");

                    b.Navigation("Contents");

                    b.Navigation("FieldIndex");

                    b.Navigation("Fields");

                    b.Navigation("PublishedContents");

                    b.Navigation("UniqueIndex");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.FieldDefinitionEntity", b =>
                {
                    b.Navigation("FieldIndex");

                    b.Navigation("UniqueIndex");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.FieldTypeEntity", b =>
                {
                    b.Navigation("FieldDefinitions");

                    b.Navigation("FieldIndex");

                    b.Navigation("UniqueIndex");
                });

            modelBuilder.Entity("Logitar.Cms.Infrastructure.Entities.LanguageEntity", b =>
                {
                    b.Navigation("ContentLocales");

                    b.Navigation("FieldIndex");

                    b.Navigation("PublishedContents");

                    b.Navigation("UniqueIndex");
                });
#pragma warning restore 612, 618
        }
    }
}
